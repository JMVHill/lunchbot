#!/usr/bin/env python

class Bot():
    def __init__(self, slackconnection, botname):
        selfbotname = botname
        self.slackconnection = slackconnection
        self.channel_id = None

    def send_message(self, text):
        # post as BOT_NAME instead of the current user
        self.slackconnection.api_call(
                "chat.postMessage",
                channel = self.channel_id,
                text = text,
                username = self.botname,
                as_user = False)

    def send_list(self, prefix, list):
        self.send_message("{}: {}".format(prefix, ', '.join(list)))

    def handle_message(self, message):
        return False # abstract

    def set_current_channel_id(self, channel_id):
        self.channel_id = channel_id

class LunchBot(Bot):
    def __init__(self, slackconnection, botname):
        Bot.__init__(self, slackconnection, botname)

        self.destinations = set() # set of Destination
        self.users = set() # set of Eater

    def handle_message(self, message):
        tokens = message.text.split()
        if len(tokens) < 2 or tokens[0] != "lunchbot":
            return False

        if tokens[1] == "help":
            self.send_message('lunchbot usage: `lunchbot [help | add | info]`')

        elif tokens[1] == "info":
            self.send_list("destinations", self.destinations)

        elif tokens[1] == "add":
            if len(tokens) <= 2:
                self.send_message("EH <@{}> ?!? nothing to add".format(user))
            else:
                dest = ' '.join(tokens[2:])
                destinations.add(dest)
                self.send_message("added '{}' as a destination".format(dest))
        else:
            self.send_message("EH?!? what you on about <@{}> BOY?".format(user))

        return True

class DumpBot(Bot):
    def __init__(self, slackconnection, botname):
        Bot.__init__(self, slackconnection, botname)

    def handle_message(self, message):
        print "got message from '{}': '{}'".format(message.user, message.text)

        return True

class SlackMessage():
    def __init__(self, text, user, channel, reply_to, bot_id):
        self.text = text
        self.user = user
        self.channel = channel
        self.reply_to = reply_to # may be None
        self.bot_id = bot_id # may be None

class SlackMonitorConnectError():
    pass

class SlackMonitor():
    def __init__(self, slackconnection):
        self.slackconnection = slackconnection
        self.handlers = dict()
        if not slackconnection.rtm_connect():
            raise SlackMonitorConnectError()

    def add_handler_for_channel(self, handler, channel):
        if channel not in self.handlers:
            self.handlers[channel] = []
        self.handlers[channel].append(handler)

    def run(self):
        while True:
            for slack_message in self.slackconnection.rtm_read():
                if slack_message.get("type") is None:
                    continue

                text = slack_message.get("text")
                user = slack_message.get("user")
                channel_id = slack_message.get("channel")
                reply_to = slack_message.get("reply_to")
                bot_id = slack_message.get("bot_id")

                channel = channel_id # safe fallback
                for i in self.slackconnection.server.channels:
                    if i.id == channel_id:
                        channel = i.name
                        break

                if not text or not user or not channel:
                    continue

                if channel not in self.handlers:
                    continue

                message = SlackMessage(text, user, channel, reply_to, bot_id)
                for handler in self.handlers[channel]:
                    handler.set_current_channel_id(channel_id)
                    handler.handle_message(message)

            time.sleep(0.1)

import time
from slackclient import SlackClient

# bot constants
BOT_TOKEN = "<redacted>"

# global slack connection
slackconnection = SlackClient(BOT_TOKEN)

# setup channel monitoring
lunchbot = LunchBot(slackconnection, "lunchbot")
dumpbot = DumpBot(slackconnection, "dumpbot")

slackmonitor = SlackMonitor(slackconnection)
slackmonitor.add_handler_for_channel(lunchbot, "_testbot")
#slackmonitor.add_handler_for_channel(dumpbot, "_testbot")
slackmonitor.run()
